{"version":3,"sources":["Componentes/Login.js","Componentes/Layout.js","Componentes/Home.js","Routes/Routes.js","App.js","serviceWorker.js","index.js"],"names":["Login","state","credentials","username","password","register","event","fetch","method","headers","body","JSON","stringify","then","data","json","console","log","token","catch","error","login","window","location","href","inputChanged","cred","target","name","value","setState","className","type","this","onChange","onClick","Component","Menu","SubMenu","Layout","Header","Content","Footer","Sider","Home","Routes","exact","path","component","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"gOAoEeA,G,kNAhEXC,MAAQ,CACJC,YAAa,CAACC,SAAU,GAAIC,SAAU,K,EAG1CC,SAAW,SAAAC,GACPC,MAAM,oCAAqC,CACvCC,OAAQ,OACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAU,EAAKX,MAAMC,eAEnCW,MAAM,SAAAC,GAAI,OAAIA,EAAKC,UACnBF,MACG,SAAAC,GACIE,QAAQC,IAAIH,EAAKI,UAEvBC,OAAO,SAAAC,GAAK,OAAIJ,QAAQI,MAAMA,O,EAGpCC,MAAQ,SAAAf,GACJC,MAAM,8BAA+B,CACjCC,OAAQ,OACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAU,EAAKX,MAAMC,eAEnCW,MAAM,SAAAC,GAAI,OAAIA,EAAKC,UACnBF,MACG,SAAAC,GACIE,QAAQC,IAAIH,EAAKI,OACjBI,OAAOC,SAASC,KAAK,YAE3BL,OAAO,SAAAC,GAAK,OAAIJ,QAAQI,MAAMA,O,EAGpCK,aAAe,SAAAnB,GACX,IAAMoB,EAAO,EAAKzB,MAAMC,YACxBwB,EAAKpB,EAAMqB,OAAOC,MAAQtB,EAAMqB,OAAOE,MACvC,EAAKC,SAAS,CAAC5B,YAAawB,K,uDAIhC,OACA,yBAAKK,UAAU,OACZ,qCACC,6BACD,2CAEI,2BAAOC,KAAK,OAAOJ,KAAK,WACxBC,MAAOI,KAAKhC,MAAMC,YAAYC,SAC9B+B,SAAUD,KAAKR,gBAEnB,6BACA,uCAEI,2BAAOO,KAAK,WAAWJ,KAAK,WAC5BC,MAAOI,KAAKhC,MAAMC,YAAYE,SAC9B8B,SAAUD,KAAKR,gBAEnB,6BACA,2BAAOO,KAAK,SAASH,MAAM,QAAQM,QAASF,KAAKZ,QACjD,2BAAOW,KAAK,SAASH,MAAM,WAAWM,QAASF,KAAK5B,gB,GA7DvC+B,c,wBCYAC,IAAZC,QACmCC,IAAnCC,OAAmCD,IAA3BE,QAA2BF,IAAlBG,OAAkBH,IAAVI,M,cCFlBC,E,uKAPP,OADA5B,QAAQC,MAEJ,6BACI,mD,GALGmB,aCYJS,MAVf,WACI,OACI,kBAAC,IAAD,KACA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,SAASC,UAAWhD,IACtC,kBAAC,IAAD,CAAO8C,OAAK,EAACC,KAAK,QAAQC,UAAWJ,OCI5BK,E,uKAPb,OACE,yBAAKlB,UAAU,OACX,kBAAC,EAAD,W,GAJQK,aCOFc,QACW,cAA7B5B,OAAOC,SAAS4B,UAEe,UAA7B7B,OAAOC,SAAS4B,UAEhB7B,OAAOC,SAAS4B,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/C,MAAK,SAAAgD,GACJA,EAAaC,gBAEd3C,OAAM,SAAAC,GACLJ,QAAQI,MAAMA,EAAM2C,a","file":"static/js/main.a6c355d3.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Login extends Component { \n\n    state = {\n        credentials: {username: '', password: ''}\n    }\n\n    register = event => {\n        fetch('http://127.0.0.1:8000/api/ users/', {\n            method: 'POST',\n            headers: {'Content-type': 'application/json'},\n            body: JSON.stringify(this.state.credentials)\n        })\n        .then( data => data.json())\n        .then(\n            data => {\n                console.log(data.token);\n            }\n        ).catch( error => console.error(error))\n    }\n\n    login = event => {\n        fetch('http://127.0.0.1:8000/auth/', {\n            method: 'POST',\n            headers: {'Content-type': 'application/json'},\n            body: JSON.stringify(this.state.credentials)\n        })\n        .then( data => data.json())\n        .then(\n            data => {\n                console.log(data.token);\n                window.location.href=\"./Home\";\n            }\n        ).catch( error => console.error(error))\n    }\n\n    inputChanged = event => {\n        const cred = this.state.credentials;\n        cred[event.target.name] = event.target.value;\n        this.setState({credentials: cred});\n    }\n\n    render() { \n    return ( \n    <div className=\"App\">\n       <h1>Login</h1>\n        <br/>\n       <label>\n           Username:\n           <input type=\"text\" name=\"username\" \n           value={this.state.credentials.username}\n           onChange={this.inputChanged}></input>\n       </label>\n       <br/>\n       <label>\n           Pass:\n           <input type=\"password\" name=\"password\"\n           value={this.state.credentials.password}\n           onChange={this.inputChanged}></input>\n       </label>\n       <br/>\n       <input type=\"submit\" value=\"Login\" onClick={this.login}></input>\n       <input type=\"submit\" value=\"Register\" onClick={this.register}></input>\n     </div>\n    ); \n  } \n} \nexport default Login;","import React, { useState } from 'react';\nimport  { Layout, Menu, Breadcrumb } from 'antd';\nimport 'antd/dist/antd.css';\nimport Login from './Login';\nimport {\n    AppstoreOutlined,\n    BarChartOutlined,\n    CloudOutlined,\n    ShopOutlined,\n    TeamOutlined,\n    UserOutlined,\n    UploadOutlined,\n    VideoCameraOutlined,\n  } from '@ant-design/icons';\nconst { SubMenu } = Menu;\nconst { Header, Content, Footer, Sider } = Layout;\n\nconst CustomLayout = (props) => {\n  const [token, setToken] = useState('');\n  const userLogin = (tok) => {\n    setToken(tok);\n  }\n    return(\n        <Layout>\n        <Sider\n          style={{\n            overflow: 'auto',\n            height: '100vh',\n            position: 'fixed',\n            left: 0,\n          }}\n        >\n          <div className=\"logo\" />\n          <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['4']}>\n            <Menu.Item key=\"1\" icon={<UserOutlined />}>\n              Cuenta\n            </Menu.Item>\n            <Menu.Item key=\"2\" icon={<VideoCameraOutlined />}>\n              Navegación\n            </Menu.Item>\n            <Menu.Item key=\"3\" icon={<UploadOutlined />}>\n              Configuración\n            </Menu.Item>\n          </Menu>\n        </Sider>\n        <Layout className=\"site-layout\" style={{ marginLeft: 200 }}>\n          <Header className=\"site-layout-background\" style={{ padding: 0 }} />\n          <Content style={{ margin: '24px 16px 0', overflow: 'initial' }}>\n            <div className=\"site-layout-background\" style={{ padding: 24, textAlign: 'center' }}>\n            \n            </div>\n          </Content>\n          <Footer style={{ textAlign: 'center' }}>Good Service ©2020 Created by Caso 3</Footer>\n        </Layout>\n      </Layout>\n    )\n}\nexport default CustomLayout\n","import React, { Component } from 'react';\n\n\nclass Home extends Component {\n    render() {\n        console.log()\n        return(\n            <div>\n                <h1>Menu Principal</h1>\n            </div>\n        );\n    }\n}\nexport default Home;","import React from 'react';\nimport {BrowserRouter, Switch, Route } from 'react-router-dom';\nimport Login from '../Componentes/Login.js';\nimport Home from '../Componentes/Home.js';\n\nfunction Routes() {\n    return (\n        <BrowserRouter>\n        <Switch>\n            <Route exact path=\"/Login\" component={Login}></Route>\n            <Route exact path=\"/Home\" component={Home}></Route>\n        </Switch>\n        </BrowserRouter>\n    )\n}\nexport default Routes;","import React, { Component } from 'react';\n   import './App.css';\n   import \"bootstrap/dist/css/bootstrap.min.css\";\n   import CustomLayout from './Componentes/Layout';\n   import Routes from './Routes/Routes';\n    class App extends Component { \n      render() { \n        return ( \n          <div className=\"App\">\n              <Routes></Routes>\n          </div>\n      ); \n      } \n    } \n      export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}